name: Test and deploy cloud

on:
  push:
  pull_request:
    branches: [main]

jobs:
  test:
    concurrency:
      group: ${{ github.ref }}-cloud-test
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - name: Setup local DynamoDB
        run: docker run -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -optimizeDbBeforeStartup -dbPath ./ &
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm test
        env:
          DYNAMODB_HOST: "http://127.0.0.1"
          DYNAMODB_PORT: "8000"

  build-backend:
    concurrency:
      group: ${{ github.ref }}-cloud-build-backend
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          docker build -t offtopic-slack-bot-backend -f ./docker/backend.Dockerfile -q ./
          mkdir -p .github/artifacts/docker
          docker save offtopic-slack-bot-backend > .github/artifacts/docker/offtopic-slack-bot-backend.tar

      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-offtopic-slack-bot-backend
          path: .github/artifacts/docker/offtopic-slack-bot-backend.tar
          retention-days: 1

  build-lambda:
    concurrency:
      group: ${{ github.ref }}-cloud-build-lambda
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          docker build -t offtopic-slack-bot-lambda -f ./docker/lambda.Dockerfile -q ./
          mkdir -p .github/artifacts/docker
          docker save offtopic-slack-bot-lambda > .github/artifacts/docker/offtopic-slack-bot-lambda.tar

      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-offtopic-slack-bot-lambda
          path: .github/artifacts/docker/offtopic-slack-bot-lambda.tar
          retention-days: 1

  deploy:
    concurrency:
      group: deploy-cloud-development
    runs-on: ubuntu-latest
    needs: ["test", "build-backend", "build-lambda"]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - uses: actions/download-artifact@v2
        with:
          name: docker-offtopic-slack-bot-backend
          path: .github/artifacts/docker

      - uses: actions/download-artifact@v2
        with:
          name: docker-offtopic-slack-bot-lambda
          path: .github/artifacts/docker

      - name: Docker load
        run: |
          docker load < .github/artifacts/docker/offtopic-slack-bot-lambda.tar
          docker load < .github/artifacts/docker/offtopic-slack-bot-backend.tar

      - name: Create or update stack resources
        run: |
          pulumi login -C package/cloud s3://pulumi.janfabian.cz
          pulumi stack -C package/cloud select development
          npm run cloud
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
